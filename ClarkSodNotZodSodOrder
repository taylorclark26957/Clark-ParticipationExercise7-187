/* AUTHOR: Taylor ClarK
 * COURSE: CPT 187
 * PURPOSE: The purpose of the SodOrder class is to set the
 * values of each record and menu option to the input given
 * by the user in each of the prompts and menus.
 * CREATEDATE: 17 February 2020
 * UPDATED: 23 February 2020
 */

package edu.cpt187.clark.participation6;

//START SodOrder CLASS
public class SodOrder
{
	//DECLARE/INITIALIZE SodOrder CLASS CONSTANTS
	private final double ZERO_TOTAL = 0.0;
	private final double TAX_RATE = .075;
	
	//DECLARE/INITIALIZE SodOrder CLASS VARIABLES
	
	//private Strings
	private String itemName = "";
	private String discountName = "";
	private String prizeName = "";
	
	//private doubles
	private double itemPrice = 0.0;
	private double discountRate = 0.0;
	
	//private char
	private char discountType = ' ';
	
	//private ints[]
	private int[] itemCounts;
	private int[] discountCounts;
	private int[] prizeCounts;
	
	//private ints
	private int itemID = 0;
	private int howMany = 0;
	private int lastItemSelectedIndex = 0;
	
	//CREATE SodOrder CLASS CONSTRUCTOR
	public SodOrder()
	{
	} //END SodOrder CLASS CONSTRUCTOR
	
	//SETTERS
	
	//START setItemCountArray() SETTER
	//DECLARES THE ARRAY itemCounts TO borrowedMaxRecords
	public void setItemCountArray(int borrowedMaxRecords)
	{
		//USE AN IF STATEMENT TO DETERMINE IF THE ARRAY
		//itemCounts IS NULL
		//IF IT IS NULL, SEED IT TO orrowedMaxRecords
		if(itemCounts == null)
		{
			itemCounts = new int[borrowedMaxRecords];
		} //END IF STATEMENT
	} //END setItemCountArray() SETTER
	
	//START setItemSelection() SETTER
	//SETS lastItemSelectedIndex TO borrowedSearchIndex,
	//WHICH IS GIVEN BY THE USER
	public void setItemSelection(int borrowedSearchIndex)
	{
		lastItemSelectedIndex = borrowedSearchIndex;
	} //END setItemSelection() SETTER
	
	//START setItemID() SETTER
	//SETS itemID TO THE ITEM ID ENTERED BY THE USER
	public void setItemID(int[] borrowedItemIDs)
	{
		itemID = borrowedItemIDs[lastItemSelectedIndex];
	} //END setItemID() SETTER
	
	//START setItemName() SETTER
	//SETS itemName TO THE NAME OF THE ITEM CHOSEN BY THE
	//USER
	public void setItemName(String[] borrowedItemNames)
	{
		itemName = borrowedItemNames[lastItemSelectedIndex];
	} //END setItemName() SETTER
	
	//START setItemPrice() SETTER
	//SETS itemPrice TO THE PRICE OF THE ITEM CHOSEN BY THE
	//USER
	public void setItemPrice(double[] borrowedItemPrices)
	{
		itemPrice = borrowedItemPrices[lastItemSelectedIndex];
	} //END setItemPrice() SETTER
	
	//START setHowMany() SETTER
	//SETS howMany TO THE QUANTITY OF ITEMS THE USER
	//ENTERED
	public void setHowMany(int borrowedHowMany)
	{
		howMany = borrowedHowMany;
	} //END setHowMany() SETTER
	
	//START setDiscountType() SETTER
	//SET discountType EQUAL TO THE DISCOUNT MENU SELECTION
	//CHOSEN BY THE USER
	public void setDiscountType(char borrowedMenuSelection)
	{
		discountType = borrowedMenuSelection;
	} //END setDiscountType() SETTER
	
	//START setDiscountName() SETTER
	//SETS discountName TO THE NAME OF THE DISCOUNT CHOSEN
	//BY THE USER
	public void setDiscountName(String[] borrowedDiscountNames)
	{
		//USE AN IF STATEMENT TO DETERMINE IF THE ARRAY
		//discountCounts IS NULL
		//IF discountCounts IS NULL, SEED IT TO
		//borrowedDiscountNames.length
		if(discountCounts == null)
		{
			discountCounts = new int[borrowedDiscountNames.length];
		} //END IF
		
		//USE AN IF/ELSE STATEMENT TO SET discountName TO
		//THE APPROPRIATE ARRAY ELEMENT BASED ON USER INPUT
		//INCREMENTS discountCounts USING THE APPROPRIATE
		//ARRAY ELEMENT
		if(discountType == 'A')
		{
			discountName = borrowedDiscountNames[0];
			discountCounts[0]++;
		} //END IF
		else if(discountType == 'B')
		{
			discountName = borrowedDiscountNames[1];
			discountCounts[1]++;
		} //END ELSE IF
		else
		{
			discountName = borrowedDiscountNames[2];
			discountCounts[2]++;
		} //END ELSE
	} //END setDiscountName() SETTER
	
	//START setDiscountRate() SETTER
	//SETS discountRate TO THE RATE OF THE DISCOUNT CHOSEN
	//BY THE USER
	public void setDiscountRate(double[] borrowedDiscountRates)
	{
		//USE AN IF/ELSE STATEMENT TO SET discountRate TO
		//THE APPROPRIATE ARRAY ELEMENT BASED ON USER INPUT
		if(discountType == 'A')
		{
			discountRate = borrowedDiscountRates[0];
		} //END IF
		else if(discountType == 'B')
		{
			discountRate = borrowedDiscountRates[1];
		} //END ELSE IF
		else
		{
			discountRate = borrowedDiscountRates[2];
		} //END ELSE
	} //END setDiscountRate() SETTER
	
	//START setPrizeName() SETTER
	//SETS prizeName TO THE APPROPRIATE ARRAY ELEMENT
	//GENERATED BY randomPrizeGenerator WITH THE BORROWED
	//INDEX borrowedPrizeIndex
	//INCREMENTS prizeCounts USING THE APPROPRIATE ARRAY
	//ELEMENT
	public void setPrizeName(String[] borrowedPrizeNames, int borrowedPrizeIndex)
	{
		//USE AN IF STATEMENT TO DETERMINE IF THE ARRAY
		//prizeCounts IS NULL
		//IF prizeCounts IS NULL, SEED IT TO
		//borrowedPrizeNames.length
		if(prizeCounts == null)
		{
			prizeCounts = new int[borrowedPrizeNames.length];
		} //END IF
		
		prizeName = borrowedPrizeNames[borrowedPrizeIndex];
		
		prizeCounts[borrowedPrizeIndex]++;
	} //END setPrizeName() SETTER
	
	//START setDecreaseInStock() SETTER
	//DECREASES THE STOCK BASED ON THE SETTER
	//setReduceStock() IN THE Inventory CLASS
	public void setDecreaseInStock(Inventory borrowedInventoryObject)
	{
		borrowedInventoryObject.setReduceStock(howMany);
	} //END setDecreaseInStock() SETTER
	
	//GETTERS
	
	//START getInStockCount() GETTER
	//RETURNS THE BORROWED VARIABLE (FROM Inventory CLASS)
	//inStockCounts
	public int getInStockCount(int[] borrowedInStockCounts)
	{
		return borrowedInStockCounts[lastItemSelectedIndex];
	} //END getInStockCount() GETTER
	
	//START getItemID() GETTER
	//RETURNS itemID
	public int getItemID()
	{
		return itemID;
	} //END getItemID() GETTER
	
	//START getItemName() GETTER
	//RETURNS itemName
	public String getItemName()
	{
		return itemName;
	} //END getItemName() GETTER
	
	//START getItemPrice() GETTER
	//RETURNS itemPrice
	public double getItemPrice()
	{
		return itemPrice;
	} //END getItemPrice() GETTER
	
	//START getItemCounts() GETTER
	//RETURNS itemCounts
	public int[] getItemCounts()
	{
		return itemCounts;
	} //END getItemCounts() GETTER
	
	//START getHowMany() GETTER
	//RETURNS howMany
	public int getHowMany()
	{
		return howMany;
	} //END getHowMany() GETTER
	
	//START getDiscountName() GETTER
	//RETURNS discountName
	public String getDiscountName()
	{
		return discountName;
	} //END getDiscountName() GETTER
	
	//START getDiscountRate() GETTER
	//RETURNS discountRate
	public double getDiscountRate()
	{
		return discountRate;
	} //END getDiscountRate() GETTER
	
	//START getDiscountCounts() GETTER
	//RETURNS discountCounts
	public int[] getDiscountCounts()
	{
		return discountCounts;
	} //END getDiscountCounts() GETTER
	
	//START getDiscountAmt() GETTER
	//CALCULATES THE VALUE OF THE DISCOUNT AMOUNT BASED ON
	//THE ITEM PRICE AND THE DISCOUNT RATE AND RETURNS THAT
	//VALUE
	public double getDiscountAmt()
	{
		return itemPrice * discountRate;
	} //END getDiscountAmt() GETTER
	
	//START getDiscountPrice() GETTER
	//CALCULATES THE VALUE OF THE DISCOUNTED PRICE BASED ON
	//THE ITEM PRICE AND DISCOUNT AMOUNT AND RETURNS THAT
	//VALUE
	public double getDiscountPrice()
	{
		return itemPrice - getDiscountAmt();
	} //END getDiscountPrice() GETTER
	
	//START getPrizeName() GETTER
	//RETURNS prizeName
	public String getPrizeName()
	{
		return prizeName;
	} //END getPrizeName() GETTER
	
	//START getPrizeCounts() GETTER
	//RETURNS prizeCounts
	public int[] getPrizeCounts()
	{
		return prizeCounts;
	} //END getPrizeCounts() GETTER
	
	//START getSubTotal() GETTER
	//CALCULATES THE VALUE OF THE SUB TOTAL BASED ON THE
	//QUANTITY OF ITEMS PURCHASED AND THE DISCOUNTED PRICE
	//AND RETURNS THAT VALUE
	public double getSubTotal()
	{
		return howMany * getDiscountPrice();
	} //END getSubTotal() GETTER
	
	//START getTaxRate() GETTER
	//RETURNS TAX_RATE
	public double getTaxRate()
	{
		return TAX_RATE;
	} //END getTaxRate() GETTER
	
	//START getTaxAmt() GETTER
	//CALCULATES THE VALUE OF THE TAX AMOUNT BASED ON THE
	//SUB TOTAL AND TAX RATE
	public double getTaxAmt()
	{
		return getSubTotal() * TAX_RATE;
	} //END getTaxAmt() GETTER
	
	//START getTotalCost() GETTER
	//CALCULATES THE VALUE OF THE TOTAL COST BASED ON THE
	//SUB TOTAL AND TAX AMOUNT AND RETURNS THAT VALUE
	public double getTotalCost()
	{
		//USE AN IF/ELSE STATEMENT TO DETERMINE IF THE USER
		//HAS A SUB TOTAL
		//IF THE USER DOES NOT HAVE A SUB TOTAL, RETURN THE
		//VALUE OF ZERO_TOTAL
		//(ELSE) IF THE USER 'DOES' HAVE A SUB TOTAL,
		//RETURN THE VALUE OF THE SUB TOTAL PLUS THE TAX
		//RATE
		if(getSubTotal() <= ZERO_TOTAL)
		{
			return ZERO_TOTAL;
		} //END getSubTotal() GETTER
		else
		{
			return getSubTotal() + getTaxAmt();
		} //END ELSE
	} //END getTotalCost() GETTER
} //END SodOrder CLASS
